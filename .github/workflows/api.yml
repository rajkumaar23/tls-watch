name: api

on:
  push:
    branches: ["main", "revived"]
    paths-ignore:
      - 'web/**'
      - '.github/workflows/web.yml'
  workflow_dispatch:

concurrency:
  group: 'api'
  cancel-in-progress: true
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: log in to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64/v8,linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy:
    name: "deploy to pi"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: configure ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/priv.key
          chmod 600 ~/.ssh/priv.key
          cat >>~/.ssh/config <<END
          Host pi
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/priv.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}

      - name: update k8s cluster
        run: |
          ssh -t pi << EOF
            cd ${{ secrets.APP_DIR }} && \
            git pull && \
            cd ${{ secrets.APP_DIR }}/k8s/db && \
            kubectl apply -f namespace.yaml && \
            kubectl delete secret db-password -n tls-watch-db --ignore-not-found && \
            kubectl create secret generic db-password -n tls-watch-db --from-literal root-password="${{ secrets.DB_PASSWORD }}" && \
            kubectl delete configmap db-config -n tls-watch-db --ignore-not-found && \
            kubectl create configmap db-config -n tls-watch-db --from-literal db-name="${{ vars.DB_NAME }}" && \
            kubectl apply -f pvc.yaml && \
            kubectl apply -f deployment.yaml && \
            kubectl apply -f service.yaml && \
            kubectl rollout restart -f deployment.yaml && \
            cd ${{ secrets.APP_DIR }}/k8s/api && \
            kubectl apply -f namespace.yaml && \
            kubectl delete secret api-secrets -n tls-watch-api --ignore-not-found && \
            kubectl create secret generic api-secrets -n tls-watch-api \
              --from-literal auth0-client-id="${{ secrets.AUTH0_CLIENT_ID }}" \
              --from-literal auth0-client-secret="${{ secrets.AUTH0_CLIENT_SECRET }}" \
              --from-literal db-password="${{ secrets.DB_PASSWORD }}" \
              --from-literal telegram-bot-token="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              --from-literal dbmate-url="${{ secrets.DBMATE_URL }}" && \
            kubectl delete configmap api-config -n tls-watch-api --ignore-not-found && \
            kubectl create configmap api-config -n tls-watch-api \
              --from-literal gin-mode="release" \
              --from-literal db-name="${{ vars.DB_NAME }}" \
              --from-literal db-host="${{ vars.DB_HOST }}" \
              --from-literal db-username="${{ vars.DB_USERNAME }}" \
              --from-literal auth0-domain="${{ vars.AUTH0_DOMAIN }}" \
              --from-literal auth0-callback-url="${{ vars.AUTH0_CALLBACK_URL }}" \
              --from-literal web-origin="${{ vars.WEB_ORIGIN }}" && \
            kubectl apply -f deployment.yaml && \
            kubectl apply -f service.yaml && \
            kubectl rollout restart -f deployment.yaml
          EOF